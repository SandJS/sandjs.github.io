{
    "docs": [
        {
            "location": "/", 
            "text": "Sand JS \n \n\n\nWhat is Sand?\n\n\nSand is a lightweight, all-purpose Javascript application framework. Sand provides a simple, yet robust, application lifecycle and many pluggable clients and libraries. A Sand application loads only the clients and libraries that it requires to do its job, allowing the application to be as simple as possible.\n\n\nWhy Sand?\n\n\nIn 3 words, \nSand is simple\n.\n\n\nYou can create \nANY\n kind of Node.js application, script, or service using Sand.\n\n\nThe simplest Sand application is shown below.\n\n\nvar Sand = require('sand');\nnew Sand().start(function () {\n  console.log('Hello, World!');\n});\n\n\n\n\nSand comes with many pre-built plugins supporting \nMySQL\n, \nElasticSearch\n, \nMemcache\n, \nRedis\n, \nRiak\n, \nSessions\n, and \nmany\n \nmore\n.\n\n\nWho's using Sand?\n\n\nPocketly\n\n\nWhym\n\n\nRequirements\n\n\nCurrently, Sand is developed on \nio.js\n using EcmaScript 6. So far, Sand has not been extensively tested on Node.js v0.12, but we expect that it will work there too.\n\n\nShow me the code!\n\n\nSee the \nexamples repository\n.\n\n\nMiscellaneous Resources \n Gotchas regarding EcmaScript 6\n\n\n\n\nFor a brief description of EcmaScript 6 Features, see \nhere\n.\n\n\nFor more information on ES6 in io.js, see \nhere\n.\n\n\nYou will notice that many of the source files of Sand require \n\"use strict\"\n for compatibility with certain recently added keywords such as \nlet\n, \nconst\n, \nclass\n and others.\n\n\n\n\nGetting Started\n\n\nSand has two components. The Sand core and the Sand Grain. These two components are tied together by the application lifecycle.\n\n\nSand Core \n Application Lifecycle\n\n\nThe core of every Sand application is the \nsand\n module.\n\n\nSand was built to orchestrate an application's \nintitialization\n, \nstartup\n, and \nshutdown\n. These are the three phases in the Sand application lifecycle.\n\n\n\n\n\n\nThe \nInitialization\n phase loads configuration and prepares the application to receive requests. The function \nSand#init(function() { // ... })\n allows you to initialize or preload any resources your app requires before starting.\n\n\n\n\n\n\nThe \nStartup\n phase starts the application. The \nstart\n event will be fired on application startup. The function \nSand#start(function() { // ... })\n starts the application and accepts an optional callback function as an argument. Note that the callback function is called \nafter\n the application starts.\n\n\n\n\n\n\nThe \nShutdown\n phase gracefully closes down the application. The \nshutdown\n event will be fired on application shutdown.\n\n\n\n\n\n\nEvery application has access to the \nsand\n global variable which holds references to all the grains that your app has loaded.\n\n\nSand Grains\n\n\nA Sand Grain is small piece of functionality required by an application. It is usually a client or library wrapper that autoloads its own configuration and provides convenience functions.\n\n\nSand grains have the same three events as the app lifecycle. The Sand core calls the \nSandGrain#init\n and \nSandGrain#shutdown\n methods on each sand grain.\n\n\nA basic sand grain looks like this.\n\n\nuse strict\n;\n\nconst SandGrain = require('sand-grain');\n\nclass Cheese extends SandGrain {\n\n  constructor() {\n    super();\n    this.name = 'cheese'; // the logging name\n    this.configName = 'cheese'; // the name of its configuration file\n    this.defaultConfig = {cheese: 'white cheddar'}; // a default config object when no config is specified\n    this.version = require('./package').version; // sets the grain's version\n  }\n\n  init(config, done) {\n    super.init(config); // this must be called\n\n    // configure your grain here\n    // `this.config` holds the config object for this grain\n\n    this.log(`I'm initializing! :D`);\n    done(); // indicates that this grain is done initializing\n  }\n\n  shutdown(done) {\n    this.log(`I'm shutting down! :(`);\n    // do shutdown stuff here (i.e. close the server gracefully, etc)\n    done();\n  }\n\n  jusEatinMyCheese() {\n    this.log(`Jus' eatin' my ${this.config.cheese}!`);\n    return 'ok? ok!';\n  }\n}\n\nmodule.exports = Cheese;\n\n\n\n\nEvery Sand Grain gets loaded onto the \nsand\n global variable on initialization.\n\n\nImport any sand Grain into your application using the \nSand#use\n function before you call \nSand#start\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#sand-js", 
            "text": "What is Sand?  Sand is a lightweight, all-purpose Javascript application framework. Sand provides a simple, yet robust, application lifecycle and many pluggable clients and libraries. A Sand application loads only the clients and libraries that it requires to do its job, allowing the application to be as simple as possible.  Why Sand?  In 3 words,  Sand is simple .  You can create  ANY  kind of Node.js application, script, or service using Sand.  The simplest Sand application is shown below.  var Sand = require('sand');\nnew Sand().start(function () {\n  console.log('Hello, World!');\n});  Sand comes with many pre-built plugins supporting  MySQL ,  ElasticSearch ,  Memcache ,  Redis ,  Riak ,  Sessions , and  many   more .  Who's using Sand?  Pocketly  Whym  Requirements  Currently, Sand is developed on  io.js  using EcmaScript 6. So far, Sand has not been extensively tested on Node.js v0.12, but we expect that it will work there too.  Show me the code!  See the  examples repository .  Miscellaneous Resources   Gotchas regarding EcmaScript 6   For a brief description of EcmaScript 6 Features, see  here .  For more information on ES6 in io.js, see  here .  You will notice that many of the source files of Sand require  \"use strict\"  for compatibility with certain recently added keywords such as  let ,  const ,  class  and others.   Getting Started  Sand has two components. The Sand core and the Sand Grain. These two components are tied together by the application lifecycle.  Sand Core   Application Lifecycle  The core of every Sand application is the  sand  module.  Sand was built to orchestrate an application's  intitialization ,  startup , and  shutdown . These are the three phases in the Sand application lifecycle.    The  Initialization  phase loads configuration and prepares the application to receive requests. The function  Sand#init(function() { // ... })  allows you to initialize or preload any resources your app requires before starting.    The  Startup  phase starts the application. The  start  event will be fired on application startup. The function  Sand#start(function() { // ... })  starts the application and accepts an optional callback function as an argument. Note that the callback function is called  after  the application starts.    The  Shutdown  phase gracefully closes down the application. The  shutdown  event will be fired on application shutdown.    Every application has access to the  sand  global variable which holds references to all the grains that your app has loaded.  Sand Grains  A Sand Grain is small piece of functionality required by an application. It is usually a client or library wrapper that autoloads its own configuration and provides convenience functions.  Sand grains have the same three events as the app lifecycle. The Sand core calls the  SandGrain#init  and  SandGrain#shutdown  methods on each sand grain.  A basic sand grain looks like this.  use strict ;\n\nconst SandGrain = require('sand-grain');\n\nclass Cheese extends SandGrain {\n\n  constructor() {\n    super();\n    this.name = 'cheese'; // the logging name\n    this.configName = 'cheese'; // the name of its configuration file\n    this.defaultConfig = {cheese: 'white cheddar'}; // a default config object when no config is specified\n    this.version = require('./package').version; // sets the grain's version\n  }\n\n  init(config, done) {\n    super.init(config); // this must be called\n\n    // configure your grain here\n    // `this.config` holds the config object for this grain\n\n    this.log(`I'm initializing! :D`);\n    done(); // indicates that this grain is done initializing\n  }\n\n  shutdown(done) {\n    this.log(`I'm shutting down! :(`);\n    // do shutdown stuff here (i.e. close the server gracefully, etc)\n    done();\n  }\n\n  jusEatinMyCheese() {\n    this.log(`Jus' eatin' my ${this.config.cheese}!`);\n    return 'ok? ok!';\n  }\n}\n\nmodule.exports = Cheese;  Every Sand Grain gets loaded onto the  sand  global variable on initialization.  Import any sand Grain into your application using the  Sand#use  function before you call  Sand#start .", 
            "title": "Sand JS"
        }, 
        {
            "location": "/Grains/http/", 
            "text": "Sand HTTP\n\n\nHttp Server for Sand\n\n\nInstall\n\n\nnpm install sand-http", 
            "title": "Http"
        }, 
        {
            "location": "/Grains/http/#sand-http", 
            "text": "Http Server for Sand  Install  npm install sand-http", 
            "title": "Sand HTTP"
        }
    ]
}